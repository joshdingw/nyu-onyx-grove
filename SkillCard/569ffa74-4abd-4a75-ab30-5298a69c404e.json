{
  "data": {
    "type": "card",
    "attributes": {
      "instructions": "# Boxel Platform Guide\n\n## Overview\nBoxel is a platform where people can create **Cards**, which under the hood are built out of Glimmer components and Ember.\n\n## Card Basics\n- **Cards** are independent linkable items that get an ID.\n- Fields are contained within **Cards**, so sometimes a user wants a custom **Field**.\n- Usually, it's creating a **Card** (derived from `CardDef`).\n\n## Coding in Boxel\n- Use Glimmer templating and TypeScript for the code.\n- Remember the limitations of logic within Glimmer templating code.\n- Basic interaction for editing fields is handled for you by Boxel, you don't need to create that (e.g. `StringField` has an edit template that allows a user to edit the data).\n- Computed fields can support more complex work and update automatically for you.\n- Interaction (button clicks, filtering on user typed content) may require Glimmer & Ember functionality (see action and tracked in the example below).\n\n## Templates\n**Cards** you create have three templates. If you do not specify them, they are automatically created for you, but users often want custom templates. Each template is a Glimmer template and can use Ember functionality. These are specified as static in the **Card** definition:\n\n### Template Example\n\n```javascript\nimport {\n  contains,\n  containsMany,\n  linksToMany,\n  field,\n  CardDef,\n  Component,\n} from 'https://cardstack.com/base/card-api';\nimport StringField from 'https://cardstack.com/base/string';\nimport NumberField from 'https://cardstack.com/base/number';\nimport BooleanField from 'https://cardstack.com/base/boolean';\n// Important, this is the tracked decorator\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\nimport { fn } from '@ember/helper';\nimport { on } from '@ember/modifier';\n\nexport class MyCustomCard extends CardDef {\n  static displayName = 'BoxelBuddyGuestList';\n\n  // linksTo and linksToMany \n  @field linkedData = linksToMany(() => AnotherCard);\n\n  // A field that is computed from other data in the card\n  @field computedData = contains(NumberField, {\n    computeVia: function (this: MyCustomCard) {\n      // implementation logic here\n      return 1;\n    },\n  });\n}\n```\n\n## Template Types\n  \n### Isolated Templates\n- Used when items are viewed on their own. Default to the isolated template\n\n```javascript\nstatic isolated = class Isolated extends Component<typeof this> {\n  // Use tracked and action decorators to be able to use interactivity in the templated\n  @tracked trackedValue = [];\n  @action interactivity(event: InputEvent) {}\n\n  <template>\n    <style scoped>\n    </style>\n  </template>\n}\n```\n\n### Embedded Templates\n- Used when they appear in other **Cards**\n\n```javascript\nstatic embedded = class Embedded extends Component<typeof this> {\n  <template>\n    <style scoped>\n    </style>\n  </template>\n}\n```\n\n### Fitted Templates\n- Should be responsive to the size of the container they appear in\n\n```javascript\nstatic fitted = class Fitted extends Component<typeof this> {\n  <template>\n    <style scoped>\n    </style>\n  </template>\n}\n```\n\n### Edit Templates\n- Used for the user editing the data. Use `@fields` let the **Field** render itself\n\n```javascript\nstatic edit = class Edit extends Component<typeof this> {\n  <template>\n  <@fields.fieldName />\n    <style>\n    </style>\n  </template>\n}\n```\n\n## Fields\n- `@fields.fieldName` lets the **Field** render itself, very useful for editable fields.\n- `@model.fieldName` gets the value out of the **Field**.\n\n## Interactivity\nIt is extremely important you use the following imports for interactivity:\n\n```javascript\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\nimport { fn, get } from '@ember/helper';\nimport { on } from '@ember/modifier';\n```\n\n## Field Definitions\nRemember to define a **Field** using the following syntax:\n\n```javascript\n@field fieldname = contains(FieldType);\n@field fieldname = containsMany(FieldType);\n```\n\n## Linking to Other Cards\nTo link to other **Cards**, use:\n\n```javascript\n@field fieldname = linksTo(() => CardType);\n@field fieldname = linksToMany(() => CardType);\n```\n\n## Additional Notes\n- You can ask followups\n- You can propose new/improved data structures\n\n## Writing Glimmer Templates\nWhen writing the Glimmer template, ensure that the style tags appear within the template tag, as the last item in them.\n\n```html\nUse useful class names and a sensible structure as you build this. Use single quotes for the class names.\n```\n\n## Accessing List and Values\nWhen writing this, take care to remember Ember and Glimmer oddities. Accessing a list by index should use this format:\n\n```javascript\n{{(get this.args.model.fieldWithAList index)}}\n```\n\nValues from the model can be directly inserted with:\n\n```javascript\n{{this.args.model.fieldName}}\n```\n\nand you can delegate rendering to the **Field** with:\n\n```html\n<@fields.fieldName />\n```\n\nYou must be careful with the templates, remember Glimmer rules. Do not put a dollar sign (`$`) directly in front of the brackets.\n\n## Styling\nUnless otherwise instructed, use a modern but stylish theme.",
      "title": "Cursor Coding",
      "description": "A skill card for use in cursor",
      "thumbnailURL": null
    },
    "meta": {
      "adoptsFrom": {
        "module": "https://cardstack.com/base/skill-card",
        "name": "SkillCard"
      }
    }
  }
}