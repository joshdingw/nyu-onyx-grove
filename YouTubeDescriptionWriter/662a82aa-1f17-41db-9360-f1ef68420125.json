{
  "data": {
    "type": "card",
    "attributes": {
      "videoUrl": "https://www.youtube.com/watch?v=dJu-L0vSZlo",
      "captionText": "Transcript\n\n\n0:00\nI learned a new phrase the other day Vibe coding that is instead of writing\n0:05\ncode with your heads down you just lean back and tell the AI what you want to make and say sure accept accept apply\n0:13\nand then just let the application emerge from the conversation versus real\n0:20\nmechanical programming and syntax and that's the power the generative software has brought to the imagination of people\n0:27\nwho weren't programmers but they're looking at the capability of these open AI CLA Sonic capability and say hey\n0:35\nmaybe I can make software for my own use so today I want to talk to you a little bit about generative software and we\n0:42\nbelieve that generative software is not only the most exciting thing because it's not just about creating content and\n0:47\nmedia of some sort using AI but creating really useful tools that can help people\n0:53\naccomplish a goal in a way that they either couldn't do because they don't have the technical skills or couldn't afford it because people with technical\n0:59\nskills teams are expensive so software is now becoming a commodity not because\n1:05\nof Open Source or sharing or apps or but it's because the software can be conjured up from your words and from\n1:12\nyour ideas So today we're going to look at whether the generative software is the next step in Ai and if so how can we\n1:20\nimprove the ability to make generative software even easier for people to adopt\n1:26\nso I saw this tweet about um repet agent level bone cursor of three of the leaders in generative software and Nick\n1:33\nsaid is it possible that we are still stuck in the old Paradigm where we're\n1:39\nadding software generation to a code editor something that's like a developer or def environment is there a way to\n1:46\nkind of do a Tik Tok where where when Tik Tok came in they came up with cap cut which is a video editing tool that\n1:53\nyou know generates all the video that you see and people have a lot of fun with it but it certainly doesn't look like the really serious professional\n2:00\nvideo editing tool could software development tools for generative software for Vibe coding evolve in that\n2:08\ndirection and what would that look like how do we move Beyond this super high-end and still very complex dep\n2:15\nenvironment with AI on top into something that's natively uh supported\n2:21\nso in my opinion I think to get to this point it's not just about improving the\n2:26\nmodels and making generation better but it's to Revis is it whether the software\n2:31\nstack of the software you generate that runs on do we need a new stack is there a way to fundamentally rethink software\n2:39\nso that generation in the AI can be much more compatible with this Vibe coding\n2:45\ngoing on so before we can answer this question I'm going to go and step back and say let's take a look at the state\n2:50\nof generative software as of February 2025 you know in a couple months if you watch this video everything I say hey we\n2:57\nget out of date but I just want to have a snapshot of like what what are the current tools what are the current workflow how are people calling\n3:03\nthemselves software composers or Vibe coders are successful in expressing the themselves in this new emerging\n3:10\ngenerative software medium and then we'll see whether the current software stack that we have learned in love the\n3:16\nfull stack Cloud software uh maybe is limiting what we can do with AI and\n3:23\npropose a solution this is the work that we are doing here at KY which is\n3:28\ncreating an AI native something is much more compatible with AI wanting to chat with you share files with you going back\n3:35\nand forth is there better way of rethinking the software composition\n3:40\nprocess and framework so that it can actually jive with the direction of this\n3:46\ntype of iterative software development that is happening in minutes and not in weeks or months so the state of\n3:52\ngenerative software is dependent on something called large language model large language model is something that\n3:58\napplies to text images codes datas and files so this is not specific to software but large language model sucks\n4:06\nin everything from the internet and essentially run it through a training process to compress almost the world's\n4:12\nknowledge into this model right these are called Model weights and they have\n4:18\ndifferent names different training runs have different code name GPT 354 was the\n4:25\nopen AI uh famous groundbreaking version clot Sonic 35 is the current leader in\n4:31\nsoftware and then meta is doing an open source model and there are new competitor from China like deeps R1 that\n4:38\nhas took a different slice of the internet and the training set and creating these models where once you put\n4:46\nit through some inference thing which is using a GPU to generate new data based on Prom it will create new stuff so it's\n4:53\nkind of like learning something and ask it to create new things um and that type of language model exist for different\n5:01\ntypes of medium text uh to interpret PDFs with files that data analysis ones\n5:09\nbut what going we focus on today is on code and related sensor data so after\n5:14\nthe training run most of these lrm knows something about coding so by analyzing\n5:21\ntons of code that's on the internet it learn JavaScript because JavaScript is a lingual funer of the internet it knows\n5:28\nreact predominant language learns UI Library like sh Cen UI which has components for drop downs and things\n5:35\nlike that it learns python it learns Json all kinds of different types of techniques to layout things using casc\n5:42\nSt sheets are all internal to the LM and when someone say I'm generating software\n5:47\nthink of it as retrieving this knowledge and adapting it to a use case and making something the same way when an LM knows\n5:54\na language you can ask it to say hey translate this particular paper into this language language and it draws upon\n6:01\nthis kind of inherent knowledge uh to do this generation so the first time I saw\n6:09\ngenerative software really kind of blowing my mind is when code interpreter which is a features in chat GPD uh that\n6:16\ncomes out and say I can just ask you to say plot the average temperature in NYC for each month and the hotel rate um I\n6:23\ncan certainly write a piece of software to do and get a data for it uh but chat GPT here wrote some python code\n6:30\nand took some generate some data based on its understanding to then give me this graph which means that uh it's s\n6:37\nthe temperature get warmer gets more expensive um but then it also doesn't get cheaper it's get cooler again\n6:43\nbecause it's a holiday so maybe the best time is around this time February March to visit for I guess decent room rates\n6:51\nand such so this is server side generated so the code python code python is a very AI language it's something\n6:57\nthat uh people who do training or use python as a two Kit so it's just natural\n7:03\nthat the first generative software will be generating python um however the root\n7:08\nbreakthrough came when Claude which is a competitor to open AI came up with something uh called artifacts which uses\n7:16\nthe sonnet model which is uh another model that's in the training run and this is a client side concept which\n7:23\nmeans that it is something that runs in your browser it generates some code that it's just kind of running only in your\n7:30\nbrowser no serers siiz stuff and use the if frame technology and this was a really revealing moment which means that\n7:37\nyou can now prompt it to say hey I want to create an artifact which is what they call these kind of ey frames uh to play\n7:44\nwith some towel size so this is actually my prom I want to play with a uh um Tio\n7:49\nsystem a way of thinking about different sizes and the quantums of the sizes to make a composable framework which is\n7:55\nwhat we do here at COD stack but instead of doing drawing this in figma in a design tool or having to write CSS to\n8:03\ntest it out just with a couple of promps I was able to generate a thing that I can play around with the thing so this\n8:10\ntype of prototyping tool is quite transformative once you make this app in\n8:15\n15 seconds you're able to play with it with a visceral nness knowing when\n8:20\nthings are too small too big our sizes sensible what can I put in it and obvious I can probably make it even\n8:26\nbetter but just being able to to uh uh play with something in such an immediate\n8:33\nsense really uh shorten the thinking cycle and the way to communicate uh with\n8:39\nother team members or develop developers what it is so this sonnet model\n8:46\nextracted all the knowledge about how to make really good UI and as well as open\n8:52\nsource libraries such as drop down Library drag and drop library and then put it together with good Aesthetics so\n8:59\nthe there's a lot of imagination that happens where people start generating these artifacts that Taps into its\n9:05\nknowledge of games webgl which is a 3D way of doing things and that's when people say wait I can now throw these\n9:13\nprograms that would have taken weeks if not you know months to build and we can\n9:18\nprototype every version of it whatever can run in a browser window uh in in in minutes if not uh in some kind of\n9:25\nseconds this is still the best model that exists today and it writes react code so this is not something that is a\n9:32\na fimile of a widget it's actually the widget Library you can copy and paste it\n9:38\nto a code base and actually use that little tile control that I have in a real life app so Sonet 35 which is the model uh\n9:47\nincluded in the CLA platform which is a chatbot this idea of artifacts but when\n9:54\na model exists and comes up in the AI field not only can you use it through\n9:59\nthe official UI in this case a chat bar the chat UI you see other projects and\n10:04\ncompanies starting to tap into this new capability of this amazing coding skill\n10:10\nthat exists in this model and there are two companies I want to talk about that has really kind of Tak in this\n10:17\nbreakthrough and open up new opportunity space one of them is web Sim they went\n10:22\nahead and allow this remixing model to become more like a social network where you can see what people have generated\n10:28\nin the last hour or weeks or days and then you can remix and make your own version no GitHub required no need to\n10:36\ncheck in your code it's all kind of like you know social media experience of\n10:41\nsharing and iterating not only the content but the template itself so that's really interesting that's the fun\n10:47\nsocial stuff at the same time the sonnet model also made it much easier for\n10:54\npeople to tap into that capability within a existing professional coding\n10:59\nenvironment so cursor which is one of the most successful maybe I think the fastest growing SAS company ever uh in\n11:06\nterms of annual revenue recurring Revenue they took the Sonet model and tapped into a fork of vs code which is a\n11:13\ncoding tool and then allow you to now like ask the AI to fix bugs for you to\n11:18\nadd features to make refactoring changes and then that becomes essentially an\n11:24\naugmented development uh idea that while it's not particularly new thing it just\n11:29\nbecause of the model breakthrough work well enough that people are now gravitating say hey if I don't have this tool then I'm not going to be able to uh\n11:37\nkeep up with the with the pace and the skill set that's out there so let's take a look at the web Sim and then we'll go\n11:43\nback and kind of look at uh the codeedit aspects of it webson started out as a\n11:48\nfull browser where you can just type in any URL um I came up with this URL uh\n11:54\nLocal Foods Market local market search t.x x uh hot to come by right now so I\n12:00\nwant to see if I can get some hallucinated aches from the virtual AI Market um and based on that URL uh it\n12:07\ngenerates a plausible page and if I click on farm fresh egg organic brown egg it will have a URL and that will\n12:14\nfollow that so it's a way of like browsing the ai's hallucination like dreaming of new web pages as you come\n12:22\nthat's how it got started so one way to think about it is that the URL is the prompt and based on the URL like what\n12:28\nwould a web page with this URL look like it generated a plausible looking local\n12:33\nfood uh delivery service uh but now uh with some iteration and and uh Community\n12:39\nfeedback later it evolved into less of a browsing as a single person surfing the\n",
      "slideOutline": "\n## Slide 1\n\n**Title:** Generative Software Needs a New Stack [cite: 1]\n\n**Speaker Notes:**\n\n- Chris Tse\n\n**Image:** CARDSTACK logo\n\n## Slide 2\n\n**Title:** State of Generative Software (Feb 2025)\n\n**Speaker Notes:**\n\n- Replit agent, lovable and cursor are all making awesome strides, but they are stuck in an old paradigm: Chat or Agent on top of a dev environment. [cite: 2]\n- Similar to how writing & publishing a book got a lot easier with printers or with a blog. [cite: 3]\n- But it's still this paradigm where you write a website/app then publish it. [cite: 4]\n- Tidal wave incoming of this. Instagram for software will be the meme of 2025. [cite: 4]\n\n**Image:**\n\n- Replit agent, lovable and cursor logos\n- Nikita Bier's tweet\n\n## Slide 3\n\n**Title:** Agenda\n\n1. State of Generative Software (Feb 2025) [cite: 5]\n2. Gaps between Al & The Traditional Stack [cite: 5]\n3. Al-Native Software Composition [cite: 5]\nDemo & Tutorial! [cite: 5]\n\n**Speaker Notes:**\n\n- None\n\n**Image:** CARDSTACK logo\n\n## Slide 4\n\n**Title:** Part 1 - State of Generative Software - Feb 2025 [cite: 6]\n\n**Speaker Notes:**\n\n- None\n\n**Image:** CARDSTACK logo\n\n## Slide 5\n\n**Title:** Large Language Model (LLM) in a nutshell\n\n**Speaker Notes:**\n\n- OpenAl gpt-40, Claude Sonnet 3.5, Meta Llama 3.3, deepseek rl are some of the leading LLMs. [cite: 7]\n- LLMs are trained on a massive amount of data, including everything on the internet. [cite: 7]\n- This one-time training process is very expensive. [cite: 7]\n- The trained model is compressed into a few GB of weights. [cite: 7]\n- At run-time, the model can generate new stuff based on a prompt. [cite: 7]\n- This inferencing process is also expensive. [cite: 7]\n\n**Image:**\n\n- Diagram of LLM architecture\n\n## Slide 6\n\n**Title:** LLM knows Software\n\n**Speaker Notes:**\n\n- LLMs know mostly open source and web-hosted stuff. [cite: 8]\n- They know JavaScript, React, Shaden/ui, Python, JSON, HTML/CSS, WebGL, SQL, etc. [cite: 8]\n\n**Image:**\n\n- Diagram of LLM architecture\n\n## Slide 7\n\n**Title:** OpenAl ChatGPT 40\n\n**Speaker Notes:**\n\n- July 2023: The first glimpse of Al code generation that comes with a runtime. [cite: 9, 10]\n\n**Image:**\n\n- Screenshot of ChatGPT 40 generating code for plotting average temperature and hotel room rates in NYC. [cite: 9]\n\n## Slide 8\n\n**Title:** OpenAl ChatGPT 40\n\n**Speaker Notes:**\n\n- Code runs in a server-side sandbox. [cite: 11]\n- Output were pre-rendered images. [cite: 11]\n\n**Image:**\n\n- Screenshot of ChatGPT 40 generating a chart of average temperature and hotel room rates in NYC. [cite: 12]\n\n## Slide 9\n\n**Title:** Claude Sonnet 3.5\n\n**Speaker Notes:**\n\n- Based on IFrame. [cite: 13]\n- Good for prototyping. [cite: 13]\n- Struggle with long chats (i.e. long context window). [cite: 13]\n- Still the best model for generating front-end code (JS, CSS, WebGL). [cite: 13]\n- Knows which open source libraries to import. [cite: 13]\n- Has good \"taste\" in terms of design aesthetics. [cite: 13]\n- Has laziness problem. [cite: 13]\n\n**Image:**\n\n- Screenshot of Claude Sonnet 3.5 generating code for a resizable tile system. [cite: 14, 15, 16, 17, 18, 19]\n\n## Slide 10\n\n**Title:** Claude Sonnet 3.5\n\n**Speaker Notes:**\n\n- LLM came out Jan 2024. [cite: 20]\n\n**Image:**\n\n- Screenshot of Claude Sonnet 3.5 generating code for a resizable tile system. [cite: 20]\n\n## Slide 11\n\n**Title:** Claude Sonnet 3.5\n\n**Speaker Notes:**\n\n- Really good at generating JavaScript code (CSS, too). [cite: 21]\n- Knows which open source libraries to use. [cite: 21]\n- Has good \"taste\" in terms of design. [cite: 21]\n- Still the best model for code generation! [cite: 21]\n\n**Image:**\n\n- Screenshot of Claude Sonnet 3.5 generating code for a resizable tile system. [cite: 22, 23, 24]\n\n## Slide 12\n\n**Title:** Claude Sonnet 3.5\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Screenshot of Claude Sonnet 3.5 generating code for a resizable tile system.\n- Screenshot of Websim, a social UI. [cite: 25]\n- Screenshot of Cursor, a code editor UI. [cite: 25]\n\n## Slide 13\n\n**Title:** websim\n\n**Speaker Notes:**\n\n- Started out as a faux-browser where the web pages are hallucinated from just any URL. [cite: 26]\n- Follow links top browse the latent space of the LLM. [cite: 26]\n\n**Image:**\n\n- Screenshot of websim. [cite: 26]\n\n## Slide 14\n\n**Title:** websim\n\n**Speaker Notes:**\n\n- Evolved into a social experience based on remixing. [cite: 27]\n- Hides the actual generated code (most of the time). [cite: 27]\n- Do everything here (prompt, code, host, play, network). [cite: 27]\n\n**Image:**\n\n- Screenshot of websim. [cite: 27]\n\n## Slide 15\n\n**Title:** websim\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Screenshot of websim. [cite: 29, 30, 31]\n\n## Slide 16\n\n**Title:** CURSOR\n\n**Speaker Notes:**\n\n- VSCode Fork. [cite: 32]\n- Diffing via Own Apply Model. [cite: 32]\n- Solves laziness. [cite: 32]\n- Composer (Multi-file edit) is the big hit. [cite: 32]\n- Compatible with VSCode Extensions. [cite: 32]\n\n**Image:**\n\n- Screenshot of CURSOR. [cite: 33, 34, 35, 36]\n\n## Slide 17\n\n**Title:** Leaders in Generative Software (Feb 2025) [cite: 37]\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Table of leaders in generative software. [cite: 38]\n\n## Slide 18\n\n**Title:** Software Development Life Cycle vs. Software Generation Life Cycle [cite: 40]\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Table comparing the traditional software development life cycle to the new software generation life cycle. [cite: 41]\n\n## Slide 19\n\n**Title:** Planning & Analysis (PRD Creation) [cite: 42, 43, 44, 45, 46, 47]\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Screenshot of OpenAl 01/03. [cite: 42, 43, 44, 45, 46, 47]\n\n## Slide 20\n\n**Title:** Hosting & Maintenance\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Screenshot of replit and Vercel. [cite: 58, 59]\n\n## Slide 21\n\n**Title:** Software Generation Life Cycle\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Diagram of the software generation life cycle. [cite: 60]\n\n## Slide 22\n\n**Title:** Agenda\n\n1. State of Generative Software (Feb 2025) [cite: 61]\n2. Gaps between Al and The Traditional \"Stack\" [cite: 61]\n3. Al-Native Software Composition [cite: 61]\n\n**Speaker Notes:**\n\n- None\n\n**Image:** CARDSTACK logo\n\n## Slide 23\n\n**Title:** Part 2 - Gaps between Al and The Traditional \"Stack\" [cite: 62]\n\n**Speaker Notes:**\n\n- None\n\n**Image:** CARDSTACK logo\n\n## Slide 24\n\n**Title:** Al knows \"The Stack\"\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Diagram of LLM architecture. [cite: 63]\n\n## Slide 25\n\n**Title:** Generating \"The Stack\"\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Diagram of the traditional software stack. [cite: 64, 65]\n\n## Slide 26\n\n**Title:** Layered Software Stack (2010-2024) [cite: 66]\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Diagram of the layered software stack. [cite: 66]\n\n## Slide 27\n\n**Title:** Compressed Software Stack\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Diagram of the compressed software stack. [cite: 67]\n\n## Slide 28\n\n**Title:** Compressed Software Stack\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Equation: IDE + UI + API + Database + Cloud [cite: 68]\n\n## Slide 29\n\n**Title:** Muscle Memory, Short-Term Memory, Long-Term Memory\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Diagram of the three types of memory. [cite: 69]\n\n## Slide 30\n\n**Title:** Muscle Memory, Short-Term Memory, Long-Term Memory\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Diagram of the three types of memory. [cite: 70]\n\n## Slide 31\n\n**Title:** Long-Term Memory, Short-Term Memory, Muscle Memory\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Diagram of the three types of memory. [cite: 71]\n\n## Slide 32\n\n**Title:** BOXEL\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Screenshot of BOXEL.\n\n## Slide 33\n\n**Title:** Agenda\n\n1. State of Generative Software (Feb 2025) [cite: 74]\n2. Gaps between Al and The Traditional Stack [cite: 74]\n3. Al-Native Software Composition [cite: 74]\nDemo & Tutorial! [cite: 74]\n\n**Speaker Notes:**\n\n- None\n\n**Image:** CARDSTACK logo\n\n## Slide 34\n\n**Title:** Part 3 - Al-Native Software Composition [cite: 75]\n\n**Speaker Notes:**\n\n- None\n\n**Image:** CARDSTACK logo\n\n## Slide 35\n\n**Title:** Al Apps\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Equation: IDE + UI + API + Database + Cloud [cite: 76]\n\n## Slide 36\n\n**Title:** Al Apps\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Diagram of Al Apps. [cite: 77]\n\n## Slide 37\n\n**Title:** Al Apps\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Diagram of Al Apps. [cite: 78]\n\n## Slide 38\n\n**Title:** Al Apps\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Diagram of Al Apps. [cite: 79]\n\n## Slide 39\n\n**Title:** Card Definitions, Card Instances, Hosted Software\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Diagram of the CARDSTACK architecture. [cite: 80]\n\n## Slide 40\n\n**Title:** Playground, Al Apps, Platform\n\n**Speaker Notes:**\n\n- None\n\n**Image:** CARDSTACK logo [cite: 81]\n\n## Slide 41\n\n**Title:** Al Generation Apps, Apps with built-in Al Functions, Discovering Apps via Al\n\n**Speaker Notes:**\n\n- None\n\n**Image:** CARDSTACK logo [cite: 82]\n\n## Slide 42\n\n**Title:** Al Generation Apps, Apps with built-in Al Functions, Discovering Apps via Al\n\n**Speaker Notes:**\n\n- None\n\n**Image:** CARDSTACK logo [cite: 83]\n\n## Slide 43\n\n**Title:** BOXEL\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Screenshot of BOXEL. [cite: 84]\n\n## Slide 44\n\n**Title:** Interact\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Screenshot of BOXEL. [cite: 85, 86, 87, 88, 89, 90]\n\n## Slide 45\n\n**Title:** BOXEL\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Screenshot of BOXEL. [cite: 91]\n\n## Slide 46\n\n**Title:** Role of Framework in Al\n\n**Speaker Notes:**\n\n- None\n\n**Bullet Points:**\n\n1. Real-time changes. No deployment. [cite: 92]\n2. Real code. No ceiling. [cite: 92]\n3. Real data logic. No slop. [cite: 92]\n4. Real personal memory. No silos. [cite: 93]\n\n**Image:** CARDSTACK logo\n\n## Slide 47\n\n**Title:** Role of Ul in Al\n\n**Speaker Notes:**\n\n- None\n\n**Content:**\n\n- Priming the Prompt [cite: 94]\n- What you put into the context window before you write your prompt [cite: 94]\n\n**Image:** BOXEL logo\n\n## Slide 48\n\n**Title:** Priming the Prompt\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Screenshot of BOXEL.\n\n## Slide 49\n\n**Title:** BOXEL\n\n**Speaker Notes:**\n\n- None\n\n**Image:**\n\n- Screenshot of BOXEL.\n\n## Slide 50\n\n**Title:** BOXEL - Early Access\n\n**Speaker Notes:**\n\n- None\n\n**Content:**\n\n- Early Access: boxel.ai [cite: 101]\n- GitHub: [github.com/cardstack/boxel](https://github.com/cardstack/boxel) [cite: 101]\n- Discord: discord.gg/boxel [cite: 101]\n- **Early Access Code:** zephyr-wave-falcon-anchor [cite: 101]\n- Invite code doesn't work? Join Discord to Request New One [cite: 101]\n- 1000 Free Monthly Al Credits [cite: 101]\n- Follow me on X: @christse [cite: 101]\n\n**Image:**\n\n- BOXEL logo\n- CARDSTACK logo\n\n## Slide 51\n\n**Title:** (Blank Slide)\n\n**Speaker Notes:**\n\n- None\n\n**Content:**\n\n- None\n\n**Image:**\n\n- None\n",
      "youtubeDescription": "00:00 Generative Software Needs a New Stack\n01:26 State of Generative Software (Feb 2025)\n03:52 Large Language Model (LLM) in a Nutshell\n05:14 LLM Knows Software\n06:09 OpenAI ChatGPT 4o\n07:08 Claude Sonnet 3.5\n11:43 websim\n12:39 Social Experience Through Websim",
      "title": "Gen Soft V2",
      "description": null,
      "thumbnailURL": null
    },
    "meta": {
      "adoptsFrom": {
        "module": "../youtube-chapter-v2",
        "name": "YouTubeDescriptionWriter"
      }
    }
  }
}